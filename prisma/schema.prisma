// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                    String         @id @default(cuid())
    name                  String?
    email                 String?        @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    watchPartiesHosting   WatchParty[]   @relation(name: "host")
    watchPartiesAttending WatchParty[]   @relation(name: "attendees")
    QnAResponses          QnAResponses[]
    SlideSeen             SlideSeen[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WatchParty {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    title      String
    time       DateTime @db.Timestamptz
    location   String
    cost       Int      @default(10)
    host       User     @relation(fields: [hostId], references: [id], name: "host")
    hostId     String
    coverImage String   @default("https://images.unsplash.com/photo-1555041469-a586c61ea9bc?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80")
    attendees  User[]   @relation(name: "attendees")
}

// -------------------------------------------------------------------------- */
//                             Engagement Features                            */
// -------------------------------------------------------------------------- */

// ----------------------------------- QnA ---------------------------------- */
model QnA {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    question     String
    options      String[]
    answer       String?
    QnAResponses QnAResponses[]
    active       Boolean        @default(true)
}

model QnAResponses {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    response  String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    qna       QnA      @relation(fields: [qnaId], references: [id])
    qnaId     String
}

// ------------------------------- SLIDE SHOW ------------------------------- */
model Slide {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    title     String
    content   String
    active    Boolean     @default(true)
    SlideSeen SlideSeen[]
}

model SlideSeen {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    slide     Slide    @relation(fields: [slideId], references: [id])
    slideId   String
}
